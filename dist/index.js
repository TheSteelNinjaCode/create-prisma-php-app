#!/usr/bin/env node
import{execSync}from"child_process";import fs from"fs";import{fileURLToPath}from"url";import path from"path";import chalk from"chalk";import prompts from"prompts";const __filename=fileURLToPath(import.meta.url),__dirname=path.dirname(__filename);function configureBrowserSyncCommand(s){const i=s.PROJECT_ROOT_PATH.indexOf("\\htdocs\\");if(-1===i)return"";const e=s.PROJECT_ROOT_PATH.substring(0,i+"\\htdocs\\".length).replace(/\\/g,"\\\\");let t=`http://localhost/${s.PROJECT_ROOT_PATH.replace(new RegExp(`^${e}`),"").replace(/\\/g,"/")}`;t=t.endsWith("/")?t.slice(0,-1):t;return`browser-sync start --proxy ${t.replace(/(?<!:)(\/\/+)/g,"/")}/public --files public/**/*.*`}async function updatePackageJson(s,i,e){const t=path.join(s,"package.json"),c=JSON.parse(fs.readFileSync(t,"utf8")),n=configureBrowserSyncCommand(i);c.scripts=Object.assign(Object.assign({},c.scripts),{postinstall:"prisma generate"}),e.tailwindcss?c.scripts=Object.assign(Object.assign({},c.scripts),{tailwind:"tailwindcss -i ./public/css/tailwind.css -o ./public/css/styles.css --minify --watch","browser-sync":n,dev:"npm-run-all --parallel browser-sync tailwind"}):c.scripts=Object.assign(Object.assign({},c.scripts),{dev:n}),c.type="module",c.prisma={seed:"node prisma/seed.js"},fs.writeFileSync(t,JSON.stringify(c,null,2))}async function createUpdateGitignoreFile(s,i){const e=path.join(s,".gitignore");let t="";fs.existsSync(e)&&(t=fs.readFileSync(e,"utf8")),i.forEach((s=>{t.includes(s)||(t+=`\n${s}`)})),t=t.trimStart(),fs.writeFileSync(e,t)}function copyRecursiveSync(s,i){const e=fs.existsSync(s),t=e&&fs.statSync(s);e&&t&&t.isDirectory()?(fs.mkdirSync(i,{recursive:!0}),fs.readdirSync(s).forEach((e=>copyRecursiveSync(path.join(s,e),path.join(i,e))))):fs.copyFileSync(s,i)}async function executeCopy(s,i){i.forEach((({srcDir:i,destDir:e})=>{copyRecursiveSync(path.join(__dirname,i),path.join(s,e))}))}function modifyTailwindConfig(s){const i=path.join(s,"tailwind.config.js");let e=fs.readFileSync(i,"utf8");const t=["./public/**/*.{php,html,js}"].map((s=>`    "${s}"`)).join(",\n");e=e.replace(/content: \[\],/g,`content: [\n${t}\n],`),fs.writeFileSync(i,e,"utf8")}function modifyIndexPHP(s,i){const e=path.join(s,"public","index.php");try{let s=fs.readFileSync(e,"utf8");const t=i?'    <link href="css/styles.css" rel="stylesheet"> \x3c!-- Stylesheet link to the tailwind compiled css --\x3e':'    <script src="https://cdn.tailwindcss.com"><\/script>';s=s.replace("</head>",`${t}\n</head>`),fs.writeFileSync(e,s,"utf8")}catch(s){}}async function createDirectoryStructure(s,i,e){await updatePackageJson(s,e,i);const t=[{srcDir:"/settings",destDir:"/settings"},{srcDir:"/prisma",destDir:"/prisma"},{srcDir:"/src",destDir:"/src"},{srcDir:"/../vendor",destDir:"/vendor"}];i.tailwindcss&&t.push({srcDir:"/public/css/",destDir:"/public/css/"}),t.push({srcDir:"/public/assets/",destDir:"/public/assets/"}),await executeCopy(s,t),[{src:"/public/favicon.ico",dest:"/public/favicon.ico"},{src:"/public/index.php",dest:"/public/index.php"},{src:"/bootstrap.php",dest:"/bootstrap.php"},{src:"/../composer.json",dest:"/composer.json"},{src:"/../composer.lock",dest:"/composer.lock"}].forEach((({src:i,dest:e})=>{const t=path.join(__dirname,i),c=path.join(s,e),n=fs.readFileSync(t,"utf8");fs.writeFileSync(c,n)})),i.tailwindcss?(modifyTailwindConfig(s),modifyIndexPHP(s,!0)):modifyIndexPHP(s,!1)}async function getAnswer(){const s=[{type:"text",name:"projectName",message:"What is your project named?",initial:"my-app"},{type:"toggle",name:"tailwindcss",message:`Would you like to use ${chalk.blue("Tailwind CSS")}?`,initial:!0,active:"Yes",inactive:"No"}],i=()=>!1;try{const e=await prompts(s,{onCancel:i});return 0===Object.keys(e).length?null:{projectName:String(e.projectName).trim().replace(/ /g,"-"),tailwindcss:e.tailwindcss}}catch(s){return null}}async function installDependencies(s,i,e=!1){execSync("npm init -y",{stdio:"inherit",cwd:s}),i.forEach((s=>{}));const t=`npm install ${e?"--save-dev":""} ${i.join(" ")}`;execSync(t,{stdio:"inherit",cwd:s})}async function main(){try{const s=await getAnswer();if(null===s)return;execSync("npm install -g create-prisma-php-app",{stdio:"inherit"}),execSync("npm install -g browser-sync",{stdio:"inherit"}),fs.mkdirSync(s.projectName);const i=path.join(process.cwd(),s.projectName);process.chdir(s.projectName);const e=["prisma","@prisma/client","typescript","@types/node","ts-node","npm-run-all"];s.tailwindcss&&e.push("tailwindcss","autoprefixer","postcss"),await installDependencies(i,e,!0),execSync("npx prisma init",{stdio:"inherit"}),execSync("npx tsc --init",{stdio:"inherit"}),s.tailwindcss&&execSync("npx tailwindcss init -p",{stdio:"inherit"});const t={PROJECT_NAME:s.projectName,PROJECT_ROOT_PATH:i.replace(/\\/g,"\\\\"),PHP_ROOT_PATH_EXE:"D:\\\\xampp\\\\php\\\\php.exe",PHP_GENERATE_CLASS_PATH:"src/app/classes/prisma"};await createDirectoryStructure(i,s,t),s.tailwindcss&&execSync("npx tailwindcss -i ./public/css/tailwind.css -o ./public/css/styles.css --minify",{stdio:"inherit"});const c=path.join(i,"settings","project-settings.js"),n=`export const projectSettings = {\n      PROJECT_NAME: "${s.projectName}",\n      PROJECT_ROOT_PATH: "${i.replace(/\\/g,"\\\\")}",\n      PHP_ROOT_PATH_EXE: "D:\\\\xampp\\\\php\\\\php.exe",\n      PHP_GENERATE_CLASS_PATH: "src/app/classes/prisma",\n    };`;fs.writeFileSync(c,n)}catch(s){process.exit(1)}}main();