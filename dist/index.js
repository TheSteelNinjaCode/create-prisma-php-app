#!/usr/bin/env node
import{execSync}from"child_process";import fs from"fs";import{fileURLToPath}from"url";import path from"path";import chalk from"chalk";import prompts from"prompts";const __filename=fileURLToPath(import.meta.url),__dirname=path.dirname(__filename);function configureBrowserSyncCommand(s,e){const t=e.PROJECT_ROOT_PATH.indexOf("\\htdocs\\");if(-1===t)return"";const i=e.PROJECT_ROOT_PATH.substring(0,t+"\\htdocs\\".length).replace(/\\/g,"\\\\");let c=`http://localhost/${e.PROJECT_ROOT_PATH.replace(new RegExp(`^${i}`),"").replace(/\\/g,"/")}`;c=c.endsWith("/")?c.slice(0,-1):c;const n=`module.exports = {\n    proxy: "${c.replace(/(?<!:)(\/\/+)/g,"/")}",\n    serveStatic: ["src/app"],\n    files: "src/app/**/*.*"\n  };`,r=path.join(s,"settings","bs-config.cjs");return fs.writeFileSync(r,n,"utf8"),"browser-sync start --config settings/bs-config.cjs"}async function updatePackageJson(s,e,t){const i=path.join(s,"package.json"),c=JSON.parse(fs.readFileSync(i,"utf8")),n=configureBrowserSyncCommand(s,e);c.scripts=Object.assign(Object.assign({},c.scripts),{postinstall:"prisma generate"}),t.tailwindcss?c.scripts=Object.assign(Object.assign({},c.scripts),{tailwind:"tailwindcss -i ./src/app/css/tailwind.css -o ./src/app/css/styles.css --minify --watch","browser-sync":n,dev:"npm-run-all --parallel browser-sync tailwind"}):c.scripts=Object.assign(Object.assign({},c.scripts),{dev:n}),c.type="module",c.prisma={seed:"node prisma/seed.js"},fs.writeFileSync(i,JSON.stringify(c,null,2))}async function createUpdateGitignoreFile(s,e){const t=path.join(s,".gitignore");let i="";fs.existsSync(t)&&(i=fs.readFileSync(t,"utf8")),e.forEach((s=>{i.includes(s)||(i+=`\n${s}`)})),i=i.trimStart(),fs.writeFileSync(t,i)}function copyRecursiveSync(s,e){const t=fs.existsSync(s),i=t&&fs.statSync(s);t&&i&&i.isDirectory()?(fs.mkdirSync(e,{recursive:!0}),fs.readdirSync(s).forEach((t=>copyRecursiveSync(path.join(s,t),path.join(e,t))))):fs.copyFileSync(s,e)}async function executeCopy(s,e){e.forEach((({srcDir:e,destDir:t})=>{copyRecursiveSync(path.join(__dirname,e),path.join(s,t))}))}function modifyTailwindConfig(s){const e=path.join(s,"tailwind.config.js");let t=fs.readFileSync(e,"utf8");const i=["./src/app/**/*.{php,html,js}"].map((s=>`    "${s}"`)).join(",\n");t=t.replace(/content: \[\],/g,`content: [\n${i}\n],`),fs.writeFileSync(e,t,"utf8")}function modifyIndexPHP(s,e){const t=path.join(s,"src","app","layout.php");try{let s=fs.readFileSync(t,"utf8");const i=e?'    <link href="css/styles.css" rel="stylesheet">':'    <script src="https://cdn.tailwindcss.com"><\/script>';s=s.replace("</head>",`${i}\n</head>`),fs.writeFileSync(t,s,"utf8")}catch(s){}}async function createDirectoryStructure(s,e,t){const i=[{srcDir:"/settings",destDir:"/settings"},{srcDir:"/prisma",destDir:"/prisma"},{srcDir:"/src",destDir:"/src"},{srcDir:"/../vendor",destDir:"/vendor"}];e.tailwindcss&&i.push({srcDir:"/src/app/css/",destDir:"/src/app/css/"}),await executeCopy(s,i),await updatePackageJson(s,t,e),[{src:"/bootstrap.php",dest:"/bootstrap.php"},{src:"/.htaccess",dest:"/.htaccess"},{src:"/../composer.json",dest:"/composer.json"},{src:"/../composer.lock",dest:"/composer.lock"}].forEach((({src:e,dest:t})=>{const i=path.join(__dirname,e),c=path.join(s,t),n=fs.readFileSync(i,"utf8");fs.writeFileSync(c,n)})),e.tailwindcss?(modifyTailwindConfig(s),modifyIndexPHP(s,!0)):modifyIndexPHP(s,!1)}async function getAnswer(){const s=[{type:"text",name:"projectName",message:"What is your project named?",initial:"my-app"},{type:"toggle",name:"tailwindcss",message:`Would you like to use ${chalk.blue("Tailwind CSS")}?`,initial:!0,active:"Yes",inactive:"No"}],e=()=>!1;try{const t=await prompts(s,{onCancel:e});return 0===Object.keys(t).length?null:{projectName:String(t.projectName).trim().replace(/ /g,"-"),tailwindcss:t.tailwindcss}}catch(s){return null}}async function installDependencies(s,e,t=!1){execSync("npm init -y",{stdio:"inherit",cwd:s}),e.forEach((s=>{}));const i=`npm install ${t?"--save-dev":""} ${e.join(" ")}`;execSync(i,{stdio:"inherit",cwd:s})}async function main(){try{const s=await getAnswer();if(null===s)return;execSync("npm install -g create-prisma-php-app",{stdio:"inherit"}),execSync("npm install -g browser-sync",{stdio:"inherit"}),fs.mkdirSync(s.projectName);const e=path.join(process.cwd(),s.projectName);process.chdir(s.projectName);const t=["prisma","@prisma/client","typescript","@types/node","ts-node","npm-run-all"];s.tailwindcss&&t.push("tailwindcss","autoprefixer","postcss"),await installDependencies(e,t,!0),execSync("npx prisma init",{stdio:"inherit"}),execSync("npx tsc --init",{stdio:"inherit"}),s.tailwindcss&&execSync("npx tailwindcss init -p",{stdio:"inherit"});const i={PROJECT_NAME:s.projectName,PROJECT_ROOT_PATH:e.replace(/\\/g,"\\\\"),PHP_ROOT_PATH_EXE:"D:\\\\xampp\\\\php\\\\php.exe",PHP_GENERATE_CLASS_PATH:"src/lib/prisma/classes"};await createDirectoryStructure(e,s,i),s.tailwindcss&&execSync("npx tailwindcss -i ./src/app/css/tailwind.css -o ./src/app/css/styles.css --minify",{stdio:"inherit"});const c=path.join(e,"settings","project-settings.js"),n=`export const projectSettings = {\n      PROJECT_NAME: "${s.projectName}",\n      PROJECT_ROOT_PATH: "${e.replace(/\\/g,"\\\\")}",\n      PHP_ROOT_PATH_EXE: "D:\\\\xampp\\\\php\\\\php.exe",\n      PHP_GENERATE_CLASS_PATH: "src/lib/prisma/classes",\n    };`;fs.writeFileSync(c,n)}catch(s){process.exit(1)}}main();