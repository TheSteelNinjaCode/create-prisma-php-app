#!/usr/bin/env node
import chalk from"chalk";import{spawn}from"child_process";import fs from"fs";import path from"path";import prompts from"prompts";const args=process.argv.slice(2),readJsonFile=e=>{const o=fs.readFileSync(e,"utf8");return JSON.parse(o)},executeCommand=(e,o=[],r={})=>new Promise(((n,s)=>{const c=spawn(e,o,{stdio:"inherit",shell:!0,...r});c.on("error",(e=>{console.error(`Execution error: ${e.message}`),s(e)})),c.on("close",(e=>{0===e?n():s(new Error(`Process exited with code ${e}`))}))}));async function getAnswer(){const e=[{type:"toggle",name:"shouldProceed",message:`This command will update the ${chalk.blue("create-prisma-php-app")} package and overwrite all default files. ${chalk.blue("Do you want to proceed")}?`,initial:!1,active:"Yes",inactive:"No"}],o=await prompts(e,{onCancel:()=>{console.warn(chalk.red("Operation cancelled by the user.")),process.exit(0)}});return 0===Object.keys(o).length?null:o}const commandsToExecute={update:"npx pp update project"},main=async()=>{if(0===args.length)return void console.log("No command provided.");const e=`npx pp ${args.join(" ")}`;if(Object.values(commandsToExecute).includes(e)){if(e===commandsToExecute.update)try{const e=await getAnswer();if(!e?.shouldProceed)return void console.log(chalk.red("Operation cancelled by the user."));const o=process.cwd(),r=path.join(o,"prisma-php.json");if(!fs.existsSync(r))return void console.error(chalk.red("The configuration file 'prisma-php.json' was not found in the current directory."));const n=readJsonFile(r),s=[n.projectName];n.backendOnly&&s.push("--backend-only"),n.swaggerDocs&&s.push("--swagger-docs"),n.tailwindcss&&s.push("--tailwindcss"),n.websocket&&s.push("--websocket"),n.prisma&&s.push("--prisma"),n.docker&&s.push("--docker"),console.log("Executing command...\n"),await executeCommand("npx",["create-prisma-php-app@latest",...s])}catch(e){e instanceof Error?e.message.includes("no such file or directory")&&console.error(chalk.red("The configuration file 'prisma-php.json' was not found in the current directory.")):console.error("Error in script execution:",e)}}else console.log("Command not recognized or not allowed.")};main().catch((e=>{console.error("Unhandled error in main function:",e)}));